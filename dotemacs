;; -*- mode: emacs-lisp -*-
(global-set-key (kbd "TAB") 'smart-tab)
(global-set-key "\C-ck" 'comment-region)

(global-set-key (kbd "C-c C-+") 'text-scale-increase)
(global-set-key (kbd "C-c C--") 'text-scale-decrease)

(global-set-key (kbd "<f8>")
                (lambda () (interactive)(call-process "date" nil t nil "+\%d.\%m.\%Y \%H:\%M" )))

(defalias 'yes-or-no-p 'y-or-n-p)

(require 'package)
(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
            '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("tromey" . "http://tromey.com/elpa/") t)


(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages
  '(paredit
    clojure-mode
    clojure-mode-extra-font-locking
    cider
    ido-ubiquitous
    smex
    projectile
    rainbow-delimiters
    tagedit
    magit
    zenburn-theme
    bash-completion
    expand-region
    multiple-cursors
    clj-refactor
    package-utils
    less-css-mode
    editorconfig
    guess-style
    restclient
    yaml-mode
    yasnippet
    yesql-ghosts
    dockerfile-mode
    web-mode))

;; https://github.com/purcell/exec-path-from-shell
(if (eq system-type 'darwin)
   (add-to-list 'my-packages 'exec-path-from-shell))

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; downloaded .el files
(add-to-list 'load-path "~/.emacs.d/vendor")

;; customizations
(add-to-list 'load-path "~/.emacs.d/customizations")

;; Language-specific
(load "setup-clojure.el")
(load "setup-python.el")
(load "setup-js.el")

(load "~/.emacs.d/robot-mode.el")
(add-to-list 'auto-mode-alist '("\\.robot$" . robot-mode))

(load "~/.emacs.d/qml-mode.el")
(add-to-list 'auto-mode-alist '("\\.qml$" . qml-mode))

(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indent)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)

(require 'yasnippet)
(yas-global-mode 1)


;; UI
(dolist (mode '(menu-bar-mode tool-bar-mode scroll-bar-mode))
              (when (fboundp mode) (funcall mode -1)))

(setq-default inhibit-startup-screen t)
(setq-default column-number-mode t)
(setq bell-volume 0)

(global-set-key (kbd "S-<up>") 'windmove-up)
(global-set-key (kbd "S-<down>") 'windmove-down)
(global-set-key (kbd "S-<left>") 'windmove-left)
(global-set-key (kbd "S-<right>") 'windmove-right)

;;function to implement a smarter TAB (EmacsWiki)
(defun smart-tab ()
  "This smart tab is minibuffer compliant: it acts as usual in
    the minibuffer. Else, if mark is active, indents region. Else if
    point is at the end of a symbol, expands it. Else indents the
    current line."
  (interactive)
  (if (minibufferp)
      (unless (minibuffer-complete)
        (hippie-expand nil))
    (if mark-active
        (indent-region (region-beginning)
                       (region-end))
      (if (looking-at "\\_>")
         (hippie-expand nil)
        (indent-for-tab-command)))))


(require 'bash-completion)
(bash-completion-setup)


;; OS clipboard
(setq
      x-select-enable-clipboard t
      x-select-enable-primary t
      save-interprogram-paste-before-kill t
      apropos-do-all t
      mouse-yank-at-point t)

(blink-cursor-mode 0)
(display-time-mode t)
(desktop-save-mode t)
(delete-selection-mode t)
(setq fill-column 80)

(recentf-mode t)
(setq recentf-max-saved-items 100)
(savehist-mode 1)
(setq history-length 1000)

;; editing
(global-set-key (kbd "M-/") 'hippie-expand)

(setq hippie-expand-try-functions-list
      '(yas-hippie-try-expand
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

(show-paren-mode 1)

(global-hl-line-mode 1)

;; Interactive search key bindings. By default, C-s runs
;; isearch-forward, so this swaps the bindings.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; comments
(defun toggle-comment-on-line ()
  "comment or uncomment current line"
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
(global-set-key (kbd "C-;") 'toggle-comment-on-line)


;; 2 space tab
(defun die-tabs ()
  (interactive)
  (set-variable 'tab-width 2)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end))
  (keyboard-quit))

;; fix weird os x kill error
(defun ns-get-pasteboard ()
  "Returns the value of the pasteboard, or nil for unsupported formats."
  (condition-case nil
      (ns-get-selection-internal 'CLIPBOARD)
    (quit nil)))

;; Sets up exec-path-from shell
;; https://github.com/purcell/exec-path-from-shell
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize)
  (exec-path-from-shell-copy-envs
   '("PATH")))

;; map cmd to alt and alt to osx cmd
(if (boundp 'ns-command-modifier)
    (setq ns-command-modifier 'meta))

(if (boundp 'ns-option-modifier)
    (setq ns-option-modifier nil))

(setq vc-follow-symlinks t)

(require 'server)
(unless (server-running-p)
  (server-start))

(require 'expand-region)
(global-set-key (kbd "C-0") 'er/expand-region)

(require 'multiple-cursors)
(global-set-key (kbd "C-^") 'mc/mark-next-like-this)
(global-set-key (kbd "C-'") 'mc/unmark-next-like-this)


(load-theme 'zenburn t)

(defun kill-dired-buffers ()
  (interactive)
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))
